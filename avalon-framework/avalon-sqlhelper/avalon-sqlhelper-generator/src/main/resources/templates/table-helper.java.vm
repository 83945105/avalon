package $!{setting.packagePath};

import pub.avalonframework.sqlhelper.core.beans.ColumnHandler;
import pub.avalonframework.sqlhelper.core.beans.TableColumn;
import pub.avalonframework.sqlhelper.core.data.block.*;
import pub.avalonframework.sqlhelper.core.helper.*;

import java.util.LinkedHashSet;
import java.util.Set;

@SuppressWarnings("all")
public class $!{table.tableAlias}$!{table.generateOptions.tableHelperOptions.classNameSuffix} implements TableHelper<$!{table.tableAlias}$!{table.generateOptions.tableHelperOptions.classNameSuffix}, $!{table.tableAlias}$!{table.generateOptions.tableHelperOptions.classNameSuffix}.Column, $!{table.tableAlias}$!{table.generateOptions.tableHelperOptions.classNameSuffix}.On, $!{table.tableAlias}$!{table.generateOptions.tableHelperOptions.classNameSuffix}.Where, $!{table.tableAlias}$!{table.generateOptions.tableHelperOptions.classNameSuffix}.Group, $!{table.tableAlias}$!{table.generateOptions.tableHelperOptions.classNameSuffix}.Having, $!{table.tableAlias}$!{table.generateOptions.tableHelperOptions.classNameSuffix}.Sort> {

    public final static $!{table.tableAlias}$!{table.generateOptions.tableHelperOptions.classNameSuffix} DEFAULT_INSTANCE = new $!{table.tableAlias}$!{table.generateOptions.tableHelperOptions.classNameSuffix}();

    #if(${table.generateOptions.tableHelperOptions.constantComment})
    /**
     * table name
     */
    #end
    public final static String TABLE_NAME = "$!{table.tableName}";
    #if(${table.generateOptions.tableHelperOptions.constantComment})
    /**
     * table alias
     */
    public final static String TABLE_ALIAS = "$!{table.tableAlias}";
    #end
    #if(${table.primaryKeyColumn})
    #if(${table.generateOptions.tableHelperOptions.constantComment})
    /**
     * primary key name
     */
    #end
    public final static String PRIMARY_KEY_NAME = "$!{table.primaryKeyColumn.name}";
    #if(${table.generateOptions.tableHelperOptions.constantComment})
    /**
     * primary key alias
     */
    #end
    public final static String PRIMARY_KEY_ALIAS = "$!{table.getColumnAlias(${table.primaryKeyColumn})}";
    #end

    #foreach(${column} in ${table.columns})
    #if(${table.generateOptions.tableHelperOptions.constantComment})
    /**
     * $!{column.comment}
     */
    #end
    public final static String $!{column.name.toUpperCase()} = "$!{column.name}";
    #if(${table.generateOptions.tableHelperOptions.constantComment})
    /**
     * $!{column.comment} alias
     */
    #end
    public final static String $!{column.name.toUpperCase()}_ALIAS = "$!{table.getColumnAlias(${column})}";
    #end

    #if(${table.generateOptions.tableHelperOptions.constantComment})
    /**
     * table columns
     */
    #end
    public final static Set<TableColumn> TABLE_COLUMNS;

    static {
        TABLE_COLUMNS = new LinkedHashSet<>($!{table.columns.size()});
        TableColumn primaryKeyTableColumn = new TableColumn(PRIMARY_KEY_NAME, PRIMARY_KEY_ALIAS, TABLE_NAME, TABLE_ALIAS, null, TABLE_COLUMNS);
        primaryKeyTableColumn.setPrimaryKeyColumnInfo(primaryKeyTableColumn);
        #foreach($column in ${table.columns})
        TABLE_COLUMNS.add(new TableColumn($!{column.name.toUpperCase()}, $!{column.name.toUpperCase()}_ALIAS, TABLE_NAME, TABLE_ALIAS, primaryKeyTableColumn, TABLE_COLUMNS));
        #end
    }

    public static $!{table.tableAlias}$!{table.generateOptions.tableHelperOptions.classNameSuffix} newInstance() {
        return new $!{table.tableAlias}$!{table.generateOptions.tableHelperOptions.classNameSuffix}();
    }

    public static Column column() {
        return new Column(TABLE_ALIAS);
    }

    public static Column column(String tableAlias) {
        return new Column(tableAlias);
    }

    public static On on() {
        return new On(TABLE_ALIAS);
    }

    public static On on(String tableAlias) {
        return new On(tableAlias);
    }

    public static Where where() {
        return new Where(TABLE_ALIAS);
    }

    public static Where where(String tableAlias) {
        return new Where(tableAlias);
    }

    public static Group groupBy() {
        return new Group(TABLE_ALIAS);
    }

    public static Group groupBy(String tableAlias) {
        return new Group(tableAlias);
    }

    public static Having having() {
        return new Having(TABLE_ALIAS);
    }

    public static Having having(String tableAlias) {
        return new Having(tableAlias);
    }

    public static Sort orderBy() {
        return new Sort(TABLE_ALIAS);
    }

    public static Sort orderBy(String tableAlias) {
        return new Sort(tableAlias);
    }

    @Override
    public String getTableName() {
        return TABLE_NAME;
    }

    @Override
    public String getTableAlias() {
        return TABLE_ALIAS;
    }

    @Override
    public String getPrimaryKeyName() {
        return PRIMARY_KEY_NAME;
    }

    @Override
    public String getPrimaryKeyAlias() {
        return PRIMARY_KEY_ALIAS;
    }

    @Override
    public Set<TableColumn> getTableColumns() {
        return TABLE_COLUMNS;
    }

    @Override
    public $!{table.tableAlias}$!{table.generateOptions.tableHelperOptions.classNameSuffix} getDefaultInstance() {
        return DEFAULT_INSTANCE;
    }

    @Override
    public Column newColumnHelper(String tableAlias) {
        return column(tableAlias);
    }

    @Override
    public On newOnHelper(String tableAlias) {
        return on(tableAlias);
    }

    @Override
    public Where newWhereHelper(String tableAlias) {
        return where(tableAlias);
    }

    @Override
    public Group newGroupHelper(String tableAlias) {
        return groupBy(tableAlias);
    }

    @Override
    public Having newHavingHelper(String tableAlias) {
        return having(tableAlias);
    }

    @Override
    public Sort newSortHelper(String tableAlias) {
        return orderBy(tableAlias);
    }

    public final static class Column extends ColumnHelper<Column> {

        public Column() {
            super(TABLE_ALIAS);
        }

        public Column(String tableAlias) {
            super(tableAlias);
        }

        @Override
        public $!{table.tableAlias}$!{table.generateOptions.tableHelperOptions.classNameSuffix} getDefaultTableHelper() {
            return DEFAULT_INSTANCE.getDefaultInstance();
        }

        public Column sqlPart(String sqlPart) {
            return this.apply(TABLE_NAME, TABLE_ALIAS, sqlPart).getHelper();
        }

        public Column primaryKey() {
            return this.apply(TABLE_NAME, TABLE_ALIAS, PRIMARY_KEY_NAME, PRIMARY_KEY_ALIAS, PRIMARY_KEY_ALIAS).getHelper();
        }

        public Column primaryKey(ColumnHandler... columnHandlers) {
            return this.apply(TABLE_NAME, TABLE_ALIAS, PRIMARY_KEY_NAME, PRIMARY_KEY_ALIAS, PRIMARY_KEY_ALIAS, columnHandlers).getHelper();
        }

        public Column primaryKey(String alias) {
            return this.apply(TABLE_NAME, TABLE_ALIAS, PRIMARY_KEY_NAME, PRIMARY_KEY_ALIAS, alias).getHelper();
        }

        public Column primaryKey(String alias, ColumnHandler... columnHandlers) {
            return this.apply(TABLE_NAME, TABLE_ALIAS, PRIMARY_KEY_NAME, PRIMARY_KEY_ALIAS, alias, columnHandlers).getHelper();
        }

        #foreach($column in ${table.columns})
        public Column $!{table.getColumnAlias(${column})}() {
            return this.apply(TABLE_NAME, TABLE_ALIAS, $!{column.name.toUpperCase()}, $!{column.name.toUpperCase()}_ALIAS, $!{column.name.toUpperCase()}_ALIAS).getHelper();
        }

        public Column $!{table.getColumnAlias(${column})}(ColumnHandler... columnHandlers) {
            return this.apply(TABLE_NAME, TABLE_ALIAS, $!{column.name.toUpperCase()}, $!{column.name.toUpperCase()}_ALIAS, $!{column.name.toUpperCase()}_ALIAS, columnHandlers).getHelper();
        }

        public Column $!{table.getColumnAlias(${column})}(String alias) {
            return this.apply(TABLE_NAME, TABLE_ALIAS, $!{column.name.toUpperCase()}, $!{column.name.toUpperCase()}_ALIAS, alias).getHelper();
        }

        public Column $!{table.getColumnAlias(${column})}(String alias, ColumnHandler... columnHandlers) {
            return this.apply(TABLE_NAME, TABLE_ALIAS, $!{column.name.toUpperCase()}, $!{column.name.toUpperCase()}_ALIAS, alias, columnHandlers).getHelper();
        }
        #end
    }

    public final static class On extends OnHelper<On> {

        public On() {
            super(TABLE_ALIAS);
        }

        public On(String tableAlias) {
            super(tableAlias);
        }

        @Override
        public $!{table.tableAlias}$!{table.generateOptions.tableHelperOptions.classNameSuffix} getDefaultTableHelper() {
            return DEFAULT_INSTANCE.getDefaultInstance();
        }

        public OnDataBlockBuilder<On> sqlPart(String sqlPart) {
            return this.apply(TABLE_NAME, TABLE_ALIAS, sqlPart);
        }

        public OnDataBlockBuilder<On> primaryKey() {
            return this.apply(TABLE_NAME, TABLE_ALIAS, PRIMARY_KEY_NAME, PRIMARY_KEY_ALIAS, PRIMARY_KEY_ALIAS);
        }

        #foreach($column in ${table.columns})
            public OnDataBlockBuilder<On> $!{table.getColumnAlias(${column})}() {
            return this.apply(TABLE_NAME, TABLE_ALIAS, $!{column.name.toUpperCase()}, $!{column.name.toUpperCase()}_ALIAS, $!{column.name.toUpperCase()}_ALIAS);
        }
        #end
    }

    public final static class Where extends WhereHelper<Where> {

        public Where() {
            super(TABLE_ALIAS);
        }

        public Where(String tableAlias) {
            super(tableAlias);
        }

        @Override
        public $!{table.tableAlias}$!{table.generateOptions.tableHelperOptions.classNameSuffix} getDefaultTableHelper() {
            return DEFAULT_INSTANCE.getDefaultInstance();
        }

        public WhereDataBlockBuilder<Where> sqlPart(String sqlPart) {
            return this.apply(TABLE_NAME, TABLE_ALIAS, sqlPart);
        }

        public WhereDataBlockBuilder<Where> primaryKey() {
            return this.apply(TABLE_NAME, TABLE_ALIAS, PRIMARY_KEY_NAME, PRIMARY_KEY_ALIAS, PRIMARY_KEY_ALIAS);
        }

        #foreach($column in ${table.columns})
        public WhereDataBlockBuilder<Where> $!{table.getColumnAlias(${column})}() {
            return this.apply(TABLE_NAME, TABLE_ALIAS, $!{column.name.toUpperCase()}, $!{column.name.toUpperCase()}_ALIAS, $!{column.name.toUpperCase()}_ALIAS);
        }
        #end
    }

    public final static class Group extends GroupHelper<Group> {

        public Group() {
            super(TABLE_ALIAS);
        }

        public Group(String tableAlias) {
            super(tableAlias);
        }

        @Override
        public $!{table.tableAlias}$!{table.generateOptions.tableHelperOptions.classNameSuffix} getDefaultTableHelper() {
            return DEFAULT_INSTANCE.getDefaultInstance();
        }

        public Group sqlPart(String sqlPart) {
            return this.apply(TABLE_NAME, TABLE_ALIAS, sqlPart).getHelper();
        }

        public Group primaryKey() {
            return this.apply(TABLE_NAME, TABLE_ALIAS, PRIMARY_KEY_NAME, PRIMARY_KEY_ALIAS, PRIMARY_KEY_ALIAS).getHelper();
        }

        #foreach($column in ${table.columns})
        public Group $!{table.getColumnAlias(${column})}() {
            return this.apply(TABLE_NAME, TABLE_ALIAS, $!{column.name.toUpperCase()}, $!{column.name.toUpperCase()}_ALIAS, $!{column.name.toUpperCase()}_ALIAS).getHelper();
        }
        #end
    }

    public final static class Having extends HavingHelper<Having> {

        public Having() {
            super(TABLE_ALIAS);
        }

        public Having(String tableAlias) {
            super(tableAlias);
        }

        @Override
        public $!{table.tableAlias}$!{table.generateOptions.tableHelperOptions.classNameSuffix} getDefaultTableHelper() {
            return DEFAULT_INSTANCE.getDefaultInstance();
        }

        public HavingDataBlockBuilder<Having> sqlPart(String sqlPart) {
            return this.apply(TABLE_NAME, TABLE_ALIAS, sqlPart);
        }

        public HavingDataBlockBuilder<Having> primaryKey() {
            return this.apply(TABLE_NAME, TABLE_ALIAS, PRIMARY_KEY_NAME, PRIMARY_KEY_ALIAS, PRIMARY_KEY_ALIAS);
        }

        public HavingDataBlockBuilder<Having> primaryKey(ColumnHandler... columnHandlers) {
            return this.apply(TABLE_NAME, TABLE_ALIAS, PRIMARY_KEY_NAME, PRIMARY_KEY_ALIAS, PRIMARY_KEY_ALIAS, columnHandlers);
        }

        #foreach($column in ${table.columns})
        public HavingDataBlockBuilder<Having> $!{table.getColumnAlias(${column})}() {
            return this.apply(TABLE_NAME, TABLE_ALIAS, $!{column.name.toUpperCase()}, $!{column.name.toUpperCase()}_ALIAS, $!{column.name.toUpperCase()}_ALIAS);
        }

        public HavingDataBlockBuilder<Having> $!{table.getColumnAlias(${column})}(ColumnHandler... columnHandlers) {
            return this.apply(TABLE_NAME, TABLE_ALIAS, $!{column.name.toUpperCase()}, $!{column.name.toUpperCase()}_ALIAS, $!{column.name.toUpperCase()}_ALIAS, columnHandlers);
        }
        #end
    }

    public final static class Sort extends SortHelper<Sort> {

        public Sort() {
            super(TABLE_ALIAS);
        }

        public Sort(String tableAlias) {
            super(tableAlias);
        }

        @Override
        public $!{table.tableAlias}$!{table.generateOptions.tableHelperOptions.classNameSuffix} getDefaultTableHelper() {
            return DEFAULT_INSTANCE.getDefaultInstance();
        }

        public SortDataBlockBuilder<Sort> sqlPart(String sqlPart) {
            return this.apply(TABLE_NAME, TABLE_ALIAS, sqlPart);
        }

        public SortDataBlockBuilder<Sort> primaryKey() {
            return this.apply(TABLE_NAME, TABLE_ALIAS, PRIMARY_KEY_NAME, PRIMARY_KEY_ALIAS, PRIMARY_KEY_ALIAS);
        }

        #foreach($column in ${table.columns})
        public SortDataBlockBuilder<Sort> $!{table.getColumnAlias(${column})}() {
            return this.apply(TABLE_NAME, TABLE_ALIAS, $!{column.name.toUpperCase()}, $!{column.name.toUpperCase()}_ALIAS, $!{column.name.toUpperCase()}_ALIAS);
        }
        #end
    }

    public static class SqlBuilder extends pub.avalonframework.sqlhelper.core.builder.SqlBuilder<$!{table.tableAlias}$!{table.generateOptions.tableHelperOptions.classNameSuffix}, Column, On, Where, Group, Having, Sort> {
        public SqlBuilder() {
            super(TABLE_ALIAS);
        }
        public SqlBuilder(String tableAlias) {
            super(tableAlias);
        }
    }

    public static class InsertColumnBuilder extends pub.avalonframework.sqlhelper.core.builder.InsertColumnBuilder<Column> {
        public InsertColumnBuilder() {
            super(TABLE_ALIAS);
        }
        public InsertColumnBuilder(String tableAlias) {
            super(tableAlias);
        }
    }

    public static class SelectColumnBuilder extends pub.avalonframework.sqlhelper.core.builder.SelectColumnBuilder<Column> {
        public SelectColumnBuilder() {
            super(TABLE_ALIAS);
        }
        public SelectColumnBuilder(String tableAlias) {
            super(tableAlias);
        }
    }

    public static class UpdateColumnBuilder extends pub.avalonframework.sqlhelper.core.builder.UpdateColumnBuilder<Column> {
        public UpdateColumnBuilder() {
            super(TABLE_ALIAS);
        }
        public UpdateColumnBuilder(String tableAlias) {
            super(tableAlias);
        }
    }

    public static class ColumnBuilder extends pub.avalonframework.sqlhelper.core.builder.ColumnBuilder<Column> {
        public ColumnBuilder() {
            super(TABLE_ALIAS);
        }
        public ColumnBuilder(String tableAlias) {
            super(tableAlias);
        }
    }

    public static class JoinBuilder extends pub.avalonframework.sqlhelper.core.builder.JoinBuilder<On> {
        public JoinBuilder() {
            super(TABLE_ALIAS);
        }
        public JoinBuilder(String tableAlias) {
            super(tableAlias);
        }
    }

    public static class WhereBuilder extends pub.avalonframework.sqlhelper.core.builder.WhereBuilder<Where> {
        public WhereBuilder() {
            super(TABLE_ALIAS);
        }
        public WhereBuilder(String tableAlias) {
            super(tableAlias);
        }
    }

    public static class GroupBuilder extends pub.avalonframework.sqlhelper.core.builder.GroupBuilder<Group> {
        public GroupBuilder() {
            super(TABLE_ALIAS);
        }
        public GroupBuilder(String tableAlias) {
            super(tableAlias);
        }
    }

    public static class HavingBuilder extends pub.avalonframework.sqlhelper.core.builder.HavingBuilder<Having> {
        public HavingBuilder() {
            super(TABLE_ALIAS);
        }
        public HavingBuilder(String tableAlias) {
            super(tableAlias);
        }
    }

    public static class SortBuilder extends pub.avalonframework.sqlhelper.core.builder.SortBuilder<Sort> {
        public SortBuilder() {
            super(TABLE_ALIAS);
        }
        public SortBuilder(String tableAlias) {
            super(tableAlias);
        }
    }
}